"""init

Revision ID: 6e937a0dace2
Revises: 
Create Date: 2025-08-13 14:41:12.788922

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6e937a0dace2'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'users',
        sa.Column('uid', sa.UUID(), nullable=False),
        sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
        sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint('uid')
    )

    op.drop_table('book')

    op.alter_column(
        'books',
        'publisher_date',
        existing_type=sa.VARCHAR(),
        type_=sa.Date(),
        existing_nullable=False,
        postgresql_using="publisher_date::date"
    )

    op.alter_column(
        'books',
        'created_at',
        existing_type=postgresql.TIMESTAMP(),
        nullable=True
    )

    op.alter_column(
        'books',
        'updated_at',
        existing_type=postgresql.TIMESTAMP(),
        nullable=True
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'books',
        'updated_at',
        existing_type=postgresql.TIMESTAMP(),
        nullable=False
    )

    op.alter_column(
        'books',
        'created_at',
        existing_type=postgresql.TIMESTAMP(),
        nullable=False
    )

    op.alter_column(
        'books',
        'publisher_date',
        existing_type=sa.Date(),
        type_=sa.VARCHAR(),
        existing_nullable=False
    )

    op.create_table(
        'book',
        sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('author', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('publisher', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('publisher_date', sa.DATE(), autoincrement=False, nullable=False),
        sa.Column('page_count', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('language', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('uid', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint('uid', name=op.f('book_pkey'))
    )

    op.drop_table('users')
    # ### end Alembic commands ###
